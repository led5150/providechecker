#!/bin/bash

echo "~~~~~~~~ Compile Student Test ~~~~~~~~~~~~"

HWNAME="$1"
SCP_DIR="$2"
EDIT_DIR="$3"
ACCOUNT="$4"
SUBMIT_DIR="ProvideCheck/$EDIT_DIR"
NUM_TESTS=2
shift 6 # shift to grab compilation command and executable if used.
# check to see if --assert-exec command is used. If so, grab executable name.
if [[ "$1" =~ "--assert-exec=" ]]; then
    RUN_BAD_EXEC="TRUE"
    EXECUTABLE=$(sed 's/--assert-exec=//' <<< "$1")
    shift
fi
COMPILE_CMND=("$@")

cd "$EDIT_DIR"

WARN_DIR="$HWNAME"_warn_submission      # only compile_student
ERROR_DIR="$HWNAME"_error_submission    # only compile_student
STOP_DIR="$HWNAME"_stop_submission      # only compile_student and make
BAD_EXEC="$HWNAME"_bad_exec_submission  # only compile_student and assert-exec
mkdir "$WARN_DIR"
# move files into warn directory. 
shopt -s extglob
mv !("$WARN_DIR") "$WARN_DIR"
# copy contents of warn directory into error directory.
cp -r "$WARN_DIR" "$ERROR_DIR"

# Only make a STOP_DIR directory if we used 'make' as our compilation command
# in the testset
if [[ "${COMPILE_CMND[0]}" == "make" ]]; then
    echo "We used make.  Stop Test will run."
    cp -r "$WARN_DIR" "$STOP_DIR"
    let "NUM_TESTS+=1"
fi

# Only make a BAD_EXEC directory if we used --assert-exec= along with 
# compile_student in the testset
if [[ "$RUN_BAD_EXEC" == "TRUE" ]]; then
    echo "We used --assert-exec.  Bad Executable test will run."
    cp -r "$WARN_DIR" "$BAD_EXEC"
    let "NUM_TESTS+=1"
fi

echo "Will run $NUM_TESTS tests."


# Now we edit the files 

# function name was generated using the hash function Haval for the 
# string "warning". int name generated by hash function CRC32 for the same.
# there is a reasonable chance no one would name a function this : )
cd "$WARN_DIR"
# pwd
WARN_CONDITION="static bool wrn5611d9f99bc990c23027ca70b7aba2(int wrne9cc6) {}"
for file in *.cpp; do
    echo "" >> "$file"
    sed -i "1i$WARN_CONDITION" "$file"
done

# edit files to ensure an error occurs.  
cd ../"$ERROR_DIR"
for cpp_file in *.cpp; do
    echo "" >> "$file"
    sed -i -e '1i*((*void)nullptr)\' "$cpp_file"
done

# Only edit Makefile to ensure a stopping condition occurs if we used 'make'
if [[ "${COMPILE_CMND[0]}" == "make" ]]; then
    cd ../"$STOP_DIR"
    for file in Makefile; do
        STOP_CONDITION="stop;"
        echo "" >> "$file"
        sed -i -e "1i$STOP_CONDITION" ./Makefile
    done
fi

# edit files to produce a bad executable name.  
# NOTE: This only runs if --assert-exec= is used in testset, since then our
# EXECUTABLE variable will not be an empty string
if [[ "$RUN_BAD_EXEC" == "TRUE" ]]; then
    cd ../"$BAD_EXEC"
    sed -i -e "s/$EXECUTABLE/bad_exec/" Makefile
fi

# move back to "root" folder
cd ../../..
# copy files to student level account
scp -q -r "$EDIT_DIR" "$ACCOUNT":~/ProvideCheck/"$SCP_DIR"

echo "Running Warning Test..."
# ssh and provide 
ssh -T "$ACCOUNT" bash -s << EOF 
    cd "$SUBMIT_DIR/$WARN_DIR"
    yes | provide comp15 "$HWNAME" * > provide_stdout.txt
    if grep -q "warning:" provide_stdout.txt; then
        echo "Submission produced a warning. Good!"
        exit 0
    else
        echo "Submission did not produce a warning. Bad!"
        exit 1
    fi
EOF


echo "Running Error Test..."
# ssh and provide
ssh -T "$ACCOUNT" bash -s << EOF 
    cd "$SUBMIT_DIR/$ERROR_DIR"
    yes | provide comp15 "$HWNAME" * > provide_stdout.txt
    if grep -q 'No errors, Good Job!' provide_stdout.txt; then
        echo "Submission did not produce an error. Bad!"
        exit 1
    else
        echo "Submission produced an error. Good!"
        exit 0
    fi
EOF

# Only run Stop Test if we used 'make' as our compilation command
# in the testset
if [[ "${COMPILE_CMND[0]}" == "make" ]]; then
echo "Running Stop Test..."
# ssh and provide
ssh -T "$ACCOUNT" bash -s << EOF 
    cd "$SUBMIT_DIR/$STOP_DIR"
    yes | provide comp15 "$HWNAME" * > provide_stdout.txt
    if egrep -q -i "(stop|stop.)" provide_stdout.txt; then
        echo "Submission produced a stopping condition. Good!"
        exit 0
    else 
        echo "Submission did not produce a stopping condition. Bad!"
        exit 1
    fi
EOF
fi

if [[ "$RUN_BAD_EXEC" == "TRUE" ]]; then
echo "Running Bad Executable Test..."
# ssh and provide
IMPROPERLY_NAMED="Your program built but was improperly named"
ssh -T "$ACCOUNT" bash -s << EOF 
    cd "$SUBMIT_DIR/$BAD_EXEC"
    yes | provide comp15 "$HWNAME" * > provide_stdout.txt
    if grep -q "$IMPROPERLY_NAMED" provide_stdout.txt; then
        echo "Submission produced a bad executable name. Good!"
        exit 0
    else 
        echo "Submission did not produce a bad executable name. Bad!"
        exit 1
    fi
EOF
fi

