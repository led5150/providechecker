#!/bin/bash

# check to see if --assert-exec command is used. If so, grab executable name.
if [[ "$1" =~ "--assert-exec=" ]]; then
        EXECUTABLE=$(sed 's/--assert-exec=//' <<<"$1")
        shift
fi
COMPILE_CMND=("${@:1}")
OUTFILE=provide_output.txt



function warnEdits() {

        WARN_CONDITION="static bool wrn5611d9f99bc990c23027ca70b7aba2(int wrne9cc6) {}"

        # Clears .cpp files and inserts warning producing code
        find . -type f -name \*.cpp \
                -exec sh -c 'echo "" >> "$1"' _ {} \; -print0 |
                xargs -r0 sed -i -e "1i$WARN_CONDITION"
}

function warnTests() {
        if grep -q "warning:" "$OUTFILE"; then
                echo -e "${GRN}Submission produced a warning. Good!${NC}"
                exit 0
        else
                echo -e "${RED}Submission did not produce a warning. Bad!${NC}"
                exit 1
        fi
}

function errorEdits() {
        # Clears .cpp files and inserts error producing code
        find . -maxdepth 1 -type f \
                -name \*.cpp \
                -exec sh -c 'echo "" >> "$1"' _ {} \; \
                -exec sed -i -e '1i*((*void)nullptr)\' {} \;
}

function errorTests() {
        if grep -q 'No errors, Good Job!' "$OUTFILE"; then
                echo -e "${RED}Submission did not produce an error. Bad!${NC}"
                exit 1
        else
                echo -e "${GRN}Submission produced an error. Good!${NC}"
                exit 0
        fi
}

function stopEdits() {
        STOP_CONDITION="stop;"

        # Edits makefile if present to create a stopping condition
        find . -maxdepth 1 -type f \
                -name Makefile \
                -exec sh -c 'echo "" >> "$1"' _ {} \; \
                -exec sed -i -e "1i$STOP_CONDITION" {} \;
}

function stopTests() {
        
        
        if egrep -q -i "(stop|stop.)" "$OUTFILE"; then
                echo -e "${GRN}Submission produced a stopping condition. Good!${NC}"
                exit 0
        else
                echo -e "${RED}Submission did not produce a stopping condition. Bad!${NC}"
                exit 1
        fi
        
}

function badEdits() {
        sed -i -e "s/$EXECUTABLE/bad_exec/" Makefile
}

function badTests() {
        IMPROPERLY_NAMED="Your program built but was improperly named"

        if grep -q "$IMPROPERLY_NAMED" "$OUTFILE"; then
                echo -e "${GRN}Submission produced a bad executable name. Good!${NC}"
                exit 0
        else
                echo -e "${RED}Submission did not produce a bad executable name. Bad!${NC}"
                exit 1
        fi

}

function performEdits() {
        toRun=("warn" "error")

        # Stop condition only applies if we have a makefile
        # Bad executable only applies if compilation command is exactly "make"
        # with no target specified
        if [[ "${COMPILE_CMND[0]}" == "make" ]]; then
                toRun+=("stop") 
                if [[ "${#COMPILE_CMND[@]}" -lt 2 ]]; then
                        toRun+=("bad")
                else 
                        echo -e "${YLW}A make target was specified, "
                        echo -e "or a custom compilation command was used."
                        echo -e "Unable to perform 'bad' test.${NC}"
                        echo ""
                fi
        fi
        
        
           
        for test in "${toRun[@]}"; do
                mkdir "$test"
                # idk why I can't use "-exec ... +" here
                find . -maxdepth 1 -type f -print0 | xargs -r0 cp -t "$test"
                (cd "$test" && "${test}"Edits)
        done

}

function performTests() {
        echo -e "~~~~~~~~~~ ${LB}Compile Student Test${NC} ~~~~~~~~~~~~"
        for directory in */; do
                (cd "$directory" && "$(basename "$directory")"Tests)
                assert_test "$?" "${directory%/*}" "${directory%/*}"
        done
}

if [[ "$1" == "--test" ]]; then
        performTests
else
        performEdits
fi
